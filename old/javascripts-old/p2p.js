// Generated by CoffeeScript 1.6.3
(function() {
  var Channel, Connection, DataChannel, Local, LocalConnection, Log, Peer, Remote, RemoteConnection, local, logger, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Log = (function() {
    function Log() {}

    Log.prototype.log = function(thing) {
      return console.log(thing);
    };

    Log.prototype.trace = function(text) {
      return console.log((performance.now() / 1000).toFixed(3) + ": " + text);
    };

    Log.prototype.error = function(text) {
      return console.error((performance.now() / 1000).toFixed(3) + ": " + text);
    };

    return Log;

  })();

  Peer = (function() {
    function Peer(name, peers) {
      this.name = name;
      this.peers = peers != null ? peers : [];
    }

    return Peer;

  })();

  Local = (function(_super) {
    __extends(Local, _super);

    function Local() {
      _ref = Local.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Local.prototype.connect = function(remote) {
      remote.connectToLocal(this);
      return this.peers.push(remote);
    };

    Local.prototype.send = function(message) {
      return this.connection.send(message);
    };

    return Local;

  })(Peer);

  Remote = (function(_super) {
    __extends(Remote, _super);

    function Remote() {
      _ref1 = Remote.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Remote.prototype.connectToLocal = function(local) {
      this.localConnection = new LocalConnection(local.name, local.name + 'SendDataChannel');
      this.remoteConnection = new RemoteConnection(name);
      return this.localConnection.createOffer(this.gotLocalDescription);
    };

    Remote.prototype.gotLocalDescription = function(desc) {
      logger.trace('Offer from local connection: \n' + desc.sdp);
      this.localConnection.setLocalDescription(desc);
      this.remoteConnection.setRemoteDescription(desc);
      return this.remoteConnection.setAnswer(this.gotRemoteDescription);
    };

    Remote.prototype.gotRemoteDescription = function(desc) {
      logger.trace('Answer from remote connection: \n' + desc.sdp);
      this.remoteConnection.setLocalDescription(desc);
      return this.localConnection.setRemoteDescription(desc);
    };

    return Remote;

  })(Peer);

  Connection = (function() {
    function Connection(name, channelName) {
      var servers;
      this.name = name;
      this.channelName = channelName;
      servers = null;
      this.rtcpc = new RTCPeerConnection(servers, {
        optional: [
          {
            RtpDataChannels: true
          }
        ]
      });
      this.rtcpc.onconnection = this.onConnection;
      this.rtcpc.onicecandidate = this.onIceCandidate;
      this.rtcpc.onopen = this.onOpen;
      this.rtcpc.onClose = this.onClose;
    }

    Connection.prototype.send = function(message) {
      if (this.channel(!null)) {
        return this.channel.send(message);
      } else {
        return logger.error('Could not send message, no channel set on connection.');
      }
    };

    Connection.prototype.setLocalDescription = function(desc) {
      return this.rtcpc.setLocalDescription(desc);
    };

    Connection.prototype.setRemoteDescription = function(desc) {
      return this.rtcpc.setRemoteDescription(desc);
    };

    Connection.prototype.onConnection = function() {
      logger.trace('Connection.onConnection');
      return this.channel = new DataChannel(this.channelName, this.rtcpc);
    };

    Connection.prototype.onIceCandidate = function(event) {
      return logger.trace('Connection.onIceCandidate');
    };

    Connection.prototype.onMessage = function(event) {
      logger.trace('Connection.onMessage');
      return logger.log(event);
    };

    Connection.prototype.onOpen = function() {
      return logger.trace('Connection.onOpen');
    };

    Connection.prototype.onClose = function() {
      return logger.trace('Connection.onClose');
    };

    return Connection;

  })();

  LocalConnection = (function(_super) {
    __extends(LocalConnection, _super);

    function LocalConnection() {
      _ref2 = LocalConnection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    LocalConnection.prototype.onOpen = function() {
      LocalConnection.__super__.onOpen.apply(this, arguments);
      return this.send("Hello Remote!");
    };

    LocalConnection.prototype.createOffer = function(offer) {
      return this.rtcpc.createOffer(offer);
    };

    return LocalConnection;

  })(Connection);

  RemoteConnection = (function(_super) {
    __extends(RemoteConnection, _super);

    function RemoteConnection() {
      _ref3 = RemoteConnection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    RemoteConnection.prototype.onOpen = function() {
      RemoteConnection.__super__.onOpen.apply(this, arguments);
      return this.send("Hello Local!");
    };

    return RemoteConnection;

  })(Connection);

  Channel = (function() {
    function Channel(name) {
      this.name = name;
    }

    return Channel;

  })();

  DataChannel = (function(_super) {
    __extends(DataChannel, _super);

    function DataChannel(name, connection) {
      var error;
      this.name = name;
      this.connection = connection;
      DataChannel.__super__.constructor.call(this, this.name);
      try {
        this.channel = this.connection.createDataChannel(this.name, {
          reliable: false
        });
      } catch (_error) {
        error = _error;
        logger.error('Failed to create data connection with exception: ' + error);
      }
    }

    return DataChannel;

  })(Channel);

  logger = new Log;

  local = new Local('Local');

  local.connect(new Remote('remote1'));

}).call(this);
