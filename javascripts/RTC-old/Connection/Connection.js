// Generated by CoffeeScript 1.6.3
(function() {
  var _base;

  window.RTC || (window.RTC = {});

  (_base = window.RTC).Connection || (_base.Connection = {});

  /*
  Handles a standard connection between two peers used to send data in one
  direction from the local to the remote peer.
  @author Laurence Roberts <lsjroberts@outlook.com>
  */


  window.RTC.Connection.Connection = (function() {
    /*
    Constructor.
    @param string name
    @param string channelName
    */

    function Connection(name, channelName) {
      var servers;
      this.name = name;
      this.channelName = channelName != null ? channelName : name + 'SendDataChannel';
      servers = null;
      this.conn = new RTCPeerConnection(servers, {
        optional: [
          {
            RtpDataChannels: true
          }
        ]
      });
      this.conn.onconnection = this.onConnection;
      this.conn.onicecandidate = this.onIceCandidate;
      this.conn.ondatachannel = this.onDataChannel;
      this.conn.onopen = this.onOpen;
      this.conn.onclose = this.onClose;
      this.channel = this.conn.createDataChannel(channelName, {
        reliable: false
      });
    }

    /*
    Set the local description.
    @param [type] desc
    */


    Connection.prototype.setLocalDescription = function(desc) {
      return this.conn.setLocalDescription(desc);
    };

    /*
    Set the remote description.
    @param [type] desc
    */


    Connection.prototype.setRemoteDescription = function(desc) {
      return this.conn.setRemoteDescription(desc);
    };

    /*
    Create an offer to attempt to connect the local description to the remote
    description.
    @param [type] offer
    */


    Connection.prototype.createOffer = function(offer) {
      return this.conn.createOffer(offer);
    };

    /*
    Send a message to the remote peer.
    @param mixed message
    */


    Connection.prototype.send = function(message) {
      Logger.trace('RTC.Connection.Connection->send');
      if (this.channel) {
        return this.channel.send(message);
      } else {
        return Logger.error('Could not send message, no channel set on connection');
      }
    };

    /*
    Connection listener.
    */


    Connection.prototype.onConnection = function() {
      return Logger.trace('RTC.Connection.Connection->onConnection');
    };

    /*
    Interactive Connectivity Establishment (ICE) Candidate listener.
    */


    Connection.prototype.onIceCandidate = function() {
      return Logger.trace('RTC.Connection.Connection->onIceCandidate');
    };

    Connection.prototype.onDataChannel = function(event) {
      return Logger.trace('RTC.Connection.Connection->onDataChannel');
    };

    /*
    Connection open listener.
    */


    Connection.prototype.onOpen = function() {
      return Logger.trace('RTC.Connection.Connection->onOpen');
    };

    /*
    Connection close listener.
    */


    Connection.prototype.onClose = function() {
      return Logger.trace('RTC.Connection.Connection->onClose');
    };

    return Connection;

  })();

}).call(this);
