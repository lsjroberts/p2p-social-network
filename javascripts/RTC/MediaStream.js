// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RTC || (window.RTC = {});

  window.AudioContext || (window.AudioContext = window.webkitAudioContext);

  navigator.getUserMedia || (navigator.getUserMedia = navigator.webkitGetUserMedia);

  window.RTC.MediaStream = (function() {
    function MediaStream(successCallback, constraints) {
      var self;
      this.successCallback = successCallback != null ? successCallback : null;
      this.constraints = constraints != null ? constraints : {};
      Logger.trace('RTC.MediaStream->constructor');
      Logger.log(constraints);
      self = this;
      navigator.getUserMedia(constraints, function(stream) {
        return self.gotStream(stream);
      }, function(error) {
        return self.failedStream(error);
      });
    }

    MediaStream.prototype.gotStream = function(stream) {
      this.stream = stream;
      Logger.trace('RTC.MediaStream->gotStream');
      this.context = new window.AudioContext;
      this.source = this.context.createMediaStreamSource(stream);
      this.source.connect(this.context.destination);
      return this.successCallback();
    };

    MediaStream.prototype.getStream = function() {
      return this.stream;
    };

    MediaStream.prototype.getSource = function() {
      if (window.URL) {
        return window.URL.createObjectURL(this.stream);
      }
      return this.stream;
    };

    MediaStream.prototype.failedStream = function(error) {
      return Logger.error('RTC.MediaStream failed to get stream');
    };

    return MediaStream;

  })();

  window.RTC.AudioStream = (function(_super) {
    __extends(AudioStream, _super);

    function AudioStream(successCallback, constraints) {
      if (constraints == null) {
        constraints = {};
      }
      constraints.audio || (constraints.audio = true);
      AudioStream.__super__.constructor.call(this, successCallback, constraints);
    }

    return AudioStream;

  })(window.RTC.MediaStream);

  window.RTC.VideoStream = (function(_super) {
    __extends(VideoStream, _super);

    function VideoStream(successCallback, constraints) {
      if (constraints == null) {
        constraints = {};
      }
      constraints.video || (constraints.video = true);
      VideoStream.__super__.constructor.call(this, successCallback, constraints);
    }

    return VideoStream;

  })(window.RTC.MediaStream);

  window.RTC.AudioVideoStream = (function(_super) {
    __extends(AudioVideoStream, _super);

    function AudioVideoStream(successCallback, constraints) {
      if (constraints == null) {
        constraints = {};
      }
      constraints.video || (constraints.video = true);
      constraints.audio || (constraints.audio = true);
      AudioVideoStream.__super__.constructor.call(this, successCallback, constraints);
    }

    return AudioVideoStream;

  })(window.RTC.MediaStream);

}).call(this);
