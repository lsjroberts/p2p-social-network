// Generated by CoffeeScript 1.6.3
(function() {
  var _base, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RTC || (window.RTC = {});

  (_base = window.RTC).Peer || (_base.Peer = {});

  window.RTC.Peer.Remote = (function(_super) {
    __extends(Remote, _super);

    function Remote() {
      _ref = Remote.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Remote.prototype.connect = function(local) {
      var self;
      Logger.trace('RTC.Peer.Remote->connect');
      self = this;
      this.localConnection = new RTC.Connection.Local(local.name);
      this.remoteConnection = new RTC.Connection.Remote(this.name);
      return this.localConnection.createOffer(function(desc) {
        return self.gotLocalDescription(desc);
      });
    };

    Remote.prototype.gotLocalDescription = function(desc) {
      var self;
      Logger.trace('RTC.Peer.Remote->gotLocalDescription');
      Logger.log(desc.sdp);
      self = this;
      this.localConnection.setLocalDescription(desc);
      this.remoteConnection.setRemoteDescription(desc);
      return this.remoteConnection.createAnswer(function(answer) {
        return self.gotRemoteDescription(answer);
      });
    };

    Remote.prototype.gotRemoteDescription = function(desc) {
      Logger.trace('RTC.Peer.Remote->gotRemoteDescription');
      Logger.log(desc.sdp);
      this.remoteConnection.setLocalDescription(desc);
      return this.localConnection.setRemoteDescription(desc);
    };

    return Remote;

  })(window.RTC.Peer.Peer);

}).call(this);
