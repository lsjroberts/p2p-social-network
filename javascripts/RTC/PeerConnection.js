// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RTC || (window.RTC = {});

  window.RTCPeerConnection || (window.RTCPeerConnection = window.webkitRTCPeerConnection);

  window.RTC.SignalingChannel = (function() {
    function SignalingChannel() {
      Logger.trace('RTC.SignalingChannel->constructor');
    }

    SignalingChannel.prototype.send = function(message) {
      Logger.trace('RTC.SignalingChannel->send');
      return Logger.log(message);
    };

    SignalingChannel.prototype.sendJSON = function(message) {
      Logger.trace('RTC.SignalingChannel->sendJSON');
      Logger.log(message);
      return this.send(JSON.stringify(message));
    };

    SignalingChannel.prototype.onMessage = function(event) {
      Logger.trace('RTC.SignalingChannel->onMessage');
      return this.onMessageCallback(event);
    };

    SignalingChannel.prototype.setOnMessageCallback = function(callback) {
      return this.onMessageCallback = callback;
    };

    return SignalingChannel;

  })();

  window.RTC.PeerConnection = (function() {
    function PeerConnection(servers, config, channel) {
      var self;
      this.servers = servers != null ? servers : null;
      this.config = config != null ? config : null;
      this.channel = channel != null ? channel : new RTC.SignalingChannel;
      Logger.trace('RTC.PeerConnection->constructor');
      this.conn = new RTCPeerConnection(servers, config);
      this.conn.onicecandidate = this.onIceCandidate;
      this.conn.onaddstream = this.onAddStream;
      self = this;
      this.channel.setOnMessageCallback(function(event) {
        return self.onMessage(event);
      });
    }

    PeerConnection.prototype.addStream = function(stream) {
      var self;
      Logger.trace('RTC.PeerConnection->addStream');
      Logger.log(stream);
      self = this;
      return this.conn.addStream(stream.getStream());
    };

    PeerConnection.prototype.gotDescription = function(desc) {
      this.conn.setLocalDescription(desc);
      return this.channel.sendJSON({
        sdp: desc
      });
    };

    PeerConnection.prototype.onIceCandidate = function(event) {
      Logger.trace('RTC.PeerConnection->onIceCandidate');
      Logger.log(event);
      return this.channel.sendJSON({
        'candidate': event.candidate
      });
    };

    PeerConnection.prototype.onAddStream = function(event) {
      Logger.trace('RTC.PeerConnection->onAddStream');
      Logger.log(event);
      return this.streams.push(event.stream);
    };

    PeerConnection.prototype.onMessage = function(event) {
      return Logger.trace('RTC.PeerConnection->onMessage');
    };

    return PeerConnection;

  })();

  window.RTC.LocalPeerConnection = (function(_super) {
    __extends(LocalPeerConnection, _super);

    function LocalPeerConnection() {
      _ref = LocalPeerConnection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LocalPeerConnection.prototype.addStream = function(stream) {
      LocalPeerConnection.__super__.addStream.call(this, stream);
      return this.conn.createOffer(function(desc) {
        return self.gotDescription(desc);
      });
    };

    LocalPeerConnection.prototype.onMessage = function(event) {
      var signal;
      LocalPeerConnection.__super__.onMessage.call(this, event);
      signal = JSON.parse(event.data);
      if (signal.sdp) {
        return this.conn.setRemoteDescription(new RTCSessionDescription(signal.sdp));
      } else if (signal.candidate) {
        return this.conn.addIceCandidate(new RTCIceCandidate(signal.candidate));
      }
    };

    return LocalPeerConnection;

  })(window.RTC.PeerConnection);

  window.RTC.RemotePeerConnection = (function(_super) {
    __extends(RemotePeerConnection, _super);

    function RemotePeerConnection() {
      _ref1 = RemotePeerConnection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RemotePeerConnection.prototype.addStream = function(stream) {
      RemotePeerConnection.__super__.addStream.call(this, stream);
      return this.conn.createAnswer(this.remoteDescription, function(desc) {
        return self.gotDescription(desc);
      });
    };

    return RemotePeerConnection;

  })(window.RTC.PeerConnection);

}).call(this);
