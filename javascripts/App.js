// Generated by CoffeeScript 1.6.3
(function() {
  var drawVideoToCanvas, localVideo, remoteVideo, resizeVideo, user, videoStream;

  localVideo = document.querySelector('video[data-stream="local"]');

  remoteVideo = document.querySelector('video[data-stream="remote"]');

  localVideo.addEventListener('loadedmetadata', (function() {
    return drawVideoToCanvas(this);
  }), false);

  remoteVideo.addEventListener('loadedmetadata', (function() {
    return drawVideoToCanvas(this);
  }), false);

  resizeVideo = (function(video) {
    var videoRatio;
    videoRatio = video.videoWidth / video.videoHeight;
    if (videoRatio >= 1) {
      video.style.width = (video.offsetWidth * videoRatio) + 'px';
      return video.style.left = ((video.parentNode.offsetWidth - video.offsetWidth) / 2) + 'px';
    } else {
      video.style.height = (video.offsetHeight * videoRatio) + 'px';
      return video.style.top = ((video.parentNode.offsetHeight - video.offsetHeight) / 2) + 'px';
    }
  });

  drawVideoToCanvas = (function(video) {
    var source;
    requestAnimationFrame(function() {
      return drawVideoToCanvas(video);
    });
    source = video.nextSibling.nextSibling.getContext('2d');
    return source.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, source.canvas.width, source.canvas.height);
  });

  videoStream = new RTC.VideoStream(function() {
    localVideo.src = videoStream.getSource();
    return localVideo.play();
  });

  user = new Social.User({
    key: 'xfptwovfgvi'
  });

  document.querySelector('#peerID').innerHTML = user.peerID;

  user.peer.on('open', function(id) {
    Logger.trace('peer.on.open');
    return Logger.log(id);
  });

  user.peer.on('connection', function(conn) {
    Logger.trace('peer.on.connection');
    return Logger.log(conn);
  });

  user.peer.on('call', function(call) {
    Logger.trace('peer.on.call');
    Logger.log(call);
    return call.answer(videoStream.getStream());
  });

  user.peer.on('error', function(err) {
    return Logger.error(err.message);
  });

  document.querySelector('#connect').onclick = (function() {
    var call, connectID;
    connectID = document.querySelector('#connectID').value;
    call = user.peer.call(connectID, videoStream.getStream());
    return call.on('stream', function(stream) {
      Logger.trace('call.on.stream');
      Logger.log(stream);
      remoteVideo.src = URL.createObjectURL(stream);
      return remoteVideo.play();
    });
  });

}).call(this);
